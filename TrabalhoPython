#1) Faça um Programa que leia uma lista de 5 números inteiros e mostre-os.

# listaNumeros = []
# print ('Informe os 5 numeros')
# for i in range(5):
# 	listaNumero.append(input('Numero '+ str(i+1) + ':\n'))
# print (listaNumeros) 

#2) Faça um Programa que leia uma lista de 10 números reais e mostre-os na ordem inversa.

# listaNumerosReais = []
# print ('Informe os 10 numeros reais')
# for i in range(10):
# 	listaNumerosReais.append(float(input('Numero '+ str(i+1) + ':\n')))
# listaNumerosReais.reverse()
# print (listaNumerosReais) 

#3) Faça um Programa que leia 4 notas, mostre as notas e a média na tela.

# listaNotas = []
# media = 0
# print ('Informe as 4 notas')
# for i in range(4):
# 	listaNotas.append(float(input('Nota '+ str(i+1) + ':\n')))
# 	media += listaNotas[i]
# media = media/4
# print (listaNotas) 
# print (media)


#4) Faça um Programa que leia uma lista de 10 caracteres, e diga quantas consoantes foram lidas.
#Imprima as consoantes.

# listaChar = []
# consoantes = 0
# print ('Informe os caracters')
# for i in range(10):
# 	listaChar.append((input('Caracter  '+ str(i+1) + ':\n')))
# 	char = listaChar[i]
# 	if(char not in ('a','e','i','o','u')):
# 		consoantes += 1
# print(consoantes)

#5) Faça um Programa que leia 20 números inteiros e armazene-os numa lista. Armazene os números
#pares na listar PAR e os números IMPARES na lista impar. Imprima os três vetores.

# listaPar = []
# listaImpar = []
# listaNumeros = []
# numero = 0
# print('Informe os numeros:')
# for i in range(20):
# 	listaNumeros.append((int(input('Numero: ' + str(i+1) + ':\n'))))
# 	numero = listaNumeros[i]
# 	print (numero)
# 	if(numero%2 == 0):
# 		listaPar.append(numero)
# 	else:
# 		listaImpar.append(numero)

# print(listaNumeros)
# print(listaPar)
# print(listaImpar)


#6) Faça um Programa que peça as quatro notas de 10 alunos, calcule e armazene numa lista a média
#de cada aluno, imprima o número de alunos com média maior ou igual a 7.0.

# listaNotas = []
# notasAluno = []
# print ('Notas dos Alunos')
# for i in range(10):
# 	media = 0
# 	notasAluno = []
# 	print ('Aluno: ' + str(i + 1))
# 	for j in range(4):
# 		notasAluno.append(float(input('Nota: ' + str(j+1) + '\n')))
# 		media += notasAluno[j]
# 		print (media)
# 	media = media/4
# 	listaNotas.append(media)

# print (listaNotas)

#7) Faça um Programa que leia um vetor de 5 números inteiros, mostre a soma, a multiplicação e os números.


# Uma lista com todos os números

numeros = []

# Onde está no loop

i = 0

# Loop apenas para voltar pro começo caso um número esteja inválido

while len(numeros) != 5:

   i += 1

   print("Diga o número " + str(i) + "º:")

   try:

       numero = int(input())

   except:

       print("Número inválido.")

       i -= 1

       continue

   numeros.append(numero)

   

# Mostrar os números

print("Números: " + ", ".join(str(numero) for numero in numeros))

# Para somar os números, use a função sum

soma = sum(numeros)

print("Soma: " + str(soma))

# Para multiplicar, faça um loop

multiplicacao = 1

for numero in numeros:

   multiplicacao = multiplicacao * numero

print("Multiplicação: " + str(multiplicacao))

#8)Faça um Programa que peça a idade e a altura de 5 pessoas, armazene cada informação no seu respectivo vetor. Imprima a idade e a altura na ordem inversa a ordem lida
idades = []
alturas = []
for i in range(1, 6):
    print('%dº Pessoa' %i)
    idade = int(input('Digite a idade: '))
    altura = float(input('Digite a altura: '))
    idades.append(idade)
    alturas.append(altura)

print('Ordem inversa')
print('Alturas')
print(alturas[::-1])
print('Idades')
print(idades[::-1])

print('Ordem lida')
print('Alturas')
print(alturas)

print('Idades')
print(idades)

#9)Faça um Programa que leia um vetor A com 10 números inteiros, calcule e mostre a soma dos quadrados dos elementos do vetor.
soma_dos_quadrados = 0
for i in range(10):
    soma_dos_quadrados += int(input(f"Digite o {i+1}º numero inteiro: ")) ** 2
print(f"A soma dos quadrados dos numeros digitados é {soma_dos_quadrados}")

#10)Faça um Programa que leia dois vetores com 10 elementos cada. Gere um terceiro vetor de 20 elementos, cujos valores deverão ser compostos pelos elementos intercalados dos dois outros vetores.
primeiro_vetor = []
segundo_vetor = []
terceiro_vetor = []

for posicao in range(10):
    primeiro_vetor.append(input("Digite o elemento da "+str(posicao+1)+"ª posição do primeiro vetor: "))

for posicao in range(10):
    segundo_vetor.append(input("Digite o elemento da "+str(posicao+1)+"ª posição do segundo vetor: "))
    
for indice in range(10):
    terceiro_vetor.append(primeiro_vetor[indice])
    terceiro_vetor.append(segundo_vetor[indice])
    
print(terceiro_vetor)

#11)Altere o programa anterior, intercalando 3 vetores de 10 elementos cada.
primeiro_vetor = []
segundo_vetor = []
terceiro_vetor = []
quarto_vetor = []

for posicao in range(10):
    primeiro_vetor.append(input("Digite o elemento da "+str(posicao+1)+"ª posição do primeiro vetor: "))

for posicao in range(10):
    segundo_vetor.append(input("Digite o elemento da "+str(posicao+1)+"ª posição do segundo vetor: "))

for posicao in range(10):
    terceiro_vetor.append(input("Digite o elemento da "+str(posicao+1)+"ª posição do terceiro vetor: "))
    
for indice in range(10):
    quarto_vetor.append(primeiro_vetor[indice])
    quarto_vetor.append(segundo_vetor[indice])
    quarto_vetor.append(terceiro_vetor[indice])
    
print(quarto_vetor)

#12)Foram anotadas as idades e alturas de 30 alunos. Faça um Programa que determine quantos alunos com mais de 13 anos possuem altura inferior à média de altura desses alunos.
idades = []
alturas = []
Contador = 0
while Contador < 30:
    idades.append(input("Digite a idade: "))
    alturas.append((float(input("Digite a altura: "))))
    print('Este é o' + str(Contador) + 'aluno')
    Contador = Contador + 1

mediaAltura = sum(alturas)/len(alturas)

quantidadeAlunos = 0
for i in range(0, len(idades)):
    if idades[i] > 13 and alturas[i] < mediaAltura:
        quantidadeAlunos = quantidadeAlunos + 1

print (str(quantidadeAlunos) + " alunos possuem mais de 13 anos e altura inferior a media de altura dos alunos")


#13) Faça um programa que receba a temperatura média de cada mês do ano e armazene-as em uma
#lista. Após isto, calcule a média anual das temperaturas e mostre todas as temperaturas acima da
#média anual, e em que mês elas ocorreram (mostrar o mês por extenso: 1 – Janeiro, 2 – Fevereiro,
#. . . ).

# temperatura = []
# meses = ['Janeiro','Fevereiro','Março','Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']
# media = 0
# acimaMedia = {}
# for i in range(len(meses)):
# 	temperatura.append(float(input('Informe a Temperatura media de ' + meses[i] + ':\n')))
# 	media += temperatura[i]
# media = media/len(meses)

# for i in range(len(meses)):
# 	if(temperatura[i] > media):
# 		acimaMedia.update({meses[i] : temperatura[i]})


# print('Media das temperaturas : Anual -> ' + str(media))
# print('Meses com temperaturas acima da media: ' + str(acimaMedia))

#14) Utilizando listas faça um programa que faça 5 perguntas para uma pessoa sobre um crime. As
#perguntas são:
#a) "Telefonou para a vítima?"
#b) "Esteve no local do crime?"
#c) "Mora perto da vítima?"
#d) "Devia para a vítima?"
#e) "Já trabalhou com a vítima?" O programa deve no final emitir uma classificação sobre a
#participação da pessoa no crime. Se a pessoa responder positivamente a 2 questões ela deve
#ser classificada como "Suspeita", entre 3 e 4 como "Cúmplice" e 5 como "Assassino". Caso
#contrário, ele será classificado como "Inocente".

def gerarPerguntas():
  
   #armazenar quantidade resultado positivo.
    quantidade_positivo = 0
    
    #status da resposta.
    status = {2 : "Suspeito(a)",
              3 : "Cúmplice",
              4 : "Cúmplice",
              5 : "Assassino"}

    #armazenar uma lista de perguntas.
    lista_perguntas = ["Telefonou para a vítima?",
                       "Esteve no local do crime?",
                       "Mora perto da vítima?",
                       "Devia para a vítima?",
                       "Já trabalhou com a vítima?"]
              
    #fazer as perguntas.
    for index in len(lista_perguntas):
        #efetuar a pergunta.
        print (lista_perguntas[index] + " (sim ou não).")
        
        #Obter uma resposta.
        resposta = input("Resp.:")
        
        #Analisar a resposta e se for positivo incrementar o valor
        if resposta.lower() == "sim":
            #incrementar mais um.
            quantidade_positivo += 1
            
    #Verificar compatibilidade dos dados com o status.
    if quantidade_positivo in status:
        #Titular o status da pessoa.
        print (status[quantidade_positivo])
        
    else:
        print ("Inocente")

#15) Faça um programa que leia um número indeterminado de valores, correspondentes a notas,
#encerrando a entrada de dados quando for informado um valor igual a -1 (que não deve ser
#armazenado). Após esta entrada de dados, faça:
#a) Mostre a quantidade de valores que foram lidos;
#b) Exiba todos os valores na ordem em que foram informados, um ao lado do outro;
#c) Exiba todos os valores na ordem inversa à que foram informados, um abaixo do outro;
#d) Calcule e mostre a soma dos valores;
#e) Calcule e mostre a média dos valores;
#f) Calcule e mostre a quantidade de valores acima da média calculada;
#g) Calcule e mostre a quantidade de valores abaixo de sete;
#h) Encerre o programa com uma mensagem;

notas = []
valor = int(input("Digite a nota: "))

while valor != -1:  
 notas.append(valor)
 valor = int(input("Digite a nota: "))
print(notas, "\nfim")

#16) Utilize uma lista para resolver o problema a seguir. Uma empresa paga seus vendedores com base em comissões. O vendedor recebe $200 por semana mais 9 por cento de suas vendas brutas daquela semana. Por exemplo, um vendedor que teve vendas brutas de $3000 em uma semana recebe $200 mais 9 por cento de $3000, ou seja, um total de $470. Escreva um programa (usando um array de contadores) que determine quantos vendedores receberam salários nos seguintes intervalos de valores:
# $200 - $299
# $300 - $399
# $400 - $499
# $500 - $599
# $600 - $699
# $700 - $799
# $800 - $899
# $900 - $999
# $1000 em diante
#Desafio: Crie ma fórmula para chegar na posição da lista a partir do salário, sem fazer vários ifs aninhados.

salarios=[200, 250, 320, 413, 516, 680, 791, 877, 999, 1000, 2000, 3000]
contagem_de_faixa_salarial = [0] * 9
for salario in salarios:
 indice = salario // 100 -2
 indice_maximo = len(contagem_de_faixa_salarial) - 1
 indice = min(indice, indice_maximo)
 contagem_de_faixa_salarial[indice] += 1

print(contagem_de_faixa_salarial)

#17) Em uma competição de salto em distância cada atleta tem direito a cinco saltos. O resultado do atleta será determinado pela média dos cinco valores restantes. Você deve fazer um programa que receba o nome e as cinco distâncias alcançadas pelo atleta em seus saltos e depois informe o nome, os saltos e a média dos saltos. O programa deve ser encerrado quando não for informado o nome do atleta. A saída do programa deve ser conforme o exemplo abaixo:
#Atleta: Rodrigo Curvêllo
#Primeiro Salto: 6.5 m
#Segundo Salto: 6.1 m
#Terceiro Salto: 6.2 m
#Quarto Salto: 5.4 m
#Quinto Salto: 5.3 m

#Resultado final:
#Atleta: Rodrigo Curvêllo
#Saltos: 6.5 - 6.1 - 6.2 - 5.4 - 5.3
#Média dos saltos: 5.9 m

atletas = []
while True:
    nome = input(
        "Digite o nome do atleta (ou enter para encerrar o programa): "
    )
    if nome == "":
        break
    atleta = {
        "nome": nome,
        "saltos": [],
        "media": 0,
        "melhor_salto": 0,
        "pior_salto": 0,
    }
    for i in range(5):
        atleta.get("saltos").append(
            float(input(f"Distância do {i+1}º salto: "))
        )
    atleta.get("saltos").sort()  # ? Ordena a lista
    atleta["pior_salto"] = atleta.get("saltos").pop(0)
    atleta["melhor_salto"] = atleta.get("saltos").pop()
    atleta["media"] = sum(atleta.get("saltos")) / 3
    print(
        f"\nMelhor salto: {atleta.get('melhor_salto'):.1f} m"
        f"\nPior salto: {atleta.get('pior_salto'):.1f} m"
        f"\nMédia dos demais saltos: {atleta.get('media'):.1f} m\n"
    )
    atletas.append(atleta)

print("\n\nResultado final")
for atleta in atletas:
    print(f"{atleta.get('nome')}: {atleta.get('media'):.1f} m")

#18) Uma grande emissora de televisão quer fazer uma enquete entre os seus telespectadores para saber qual o melhor jogador após cada jogo. Para isto, faz-se necessário o desenvolvimento de um programa, que será utilizado pelas telefonistas, para a computação dos votos. Sua equipe foi contratada para desenvolver este programa, utilizando a linguagem de programação C++. Para computar cada voto, a telefonista digitará um número, entre 1 e 23, correspondente ao número da camisa do jogador. Um número de jogador igual zero, indica que a votação foi encerrada. Se um número inválido for digitado, o programa deve ignorá-lo, mostrando uma breve mensagem de aviso, e voltando a pedir outro número. Após o final da votação, o programa deverá exibir:
#O total de votos computados;
#Os númeos e respectivos votos de todos os jogadores que receberam votos;
#O percentual de votos de cada um destes jogadores;
#O número do jogador escolhido como o melhor jogador da partida, juntamente com o número de votos e o percentual de votos dados a ele.
#Observe que os votos inválidos e o zero final não devem ser computados como votos. O resultado aparece ordenado pelo número do jogador. O programa deve fazer uso de arrays. O programa deverá executar o cálculo do percentual de cada jogador através de uma função. Esta função receberá dois parâmetros: o número de votos de um jogador e o total de votos. A função calculará o percentual e retornará o valor calculado. Abaixo segue uma tela de exemplo. O disposição das informações deve ser o mais próxima possível ao exemplo. Os dados são fictícios e podem mudar a cada execução do programa. Ao final, o programa deve ainda gravar os dados referentes ao resultado da votação em um arquivo texto no disco, obedecendo a mesma disposição apresentada na tela.
#Enquete: Quem foi o melhor jogador?

Número do jogador (0=fim): 9
Número do jogador (0=fim): 10
Número do jogador (0=fim): 9
Número do jogador (0=fim): 10
Número do jogador (0=fim): 11
Número do jogador (0=fim): 10
Número do jogador (0=fim): 50
Informe um valor entre 1 e 23 ou 0 para sair!
Número do jogador (0=fim): 9
Número do jogador (0=fim): 9
Número do jogador (0=fim): 0

Resultado da votação:
Foram computados 8 votos.
Jogador Votos           %
9               4               50,0%
10              3               37,5%
11              1               12,5%
O melhor jogador foi o número 9, com 4 votos, correspondendo a 50% do total de votos.

votos = [0]*23
num = 1000
num_votos = 0
while num != 0:    
    num = int(input("Digite o número do jogador (para finalizar a contabilização digite 0): "))
    if num > 23:
        print('Número inválido')
        continue
    else:
        votos[num-1] = votos[num-1] + 1 
        num_votos = num_votos + 1   
        
melhor = 0

print('\nForam computados '+str(num_votos)+ ' votos!\n')

print('Jogador  |   Votos   |    % de Votos   |')
print('========================================')
for idx in range(len(votos)):
    if votos[idx] > 0: 
    
        if idx >= 10:
            if votos[idx] < 10:
                print(f'  {idx+1}     |     {votos[idx]}     |       {(votos[idx]/num_votos)*100:.2f}     |')
            else:
                print(f'  {idx+1}     |     {votos[idx]}    |       {(votos[idx]/num_votos)*100:.2f}     |')
        else:
            if votos[idx] < 10:
                print(f'  {idx+1}      |     {votos[idx]}     |       {(votos[idx]/num_votos)*100:.2f}     |')
            else:
                print(f'  {idx+1}      |     {votos[idx]}    |       {(votos[idx]/num_votos)*100:.2f}     |')
            
    
    if votos[idx] > votos[melhor]:
        melhor = idx
print('========================================')


print(f'\nO melhor atleta foi o Camisa {idx+1}, com {votos[idx]} votos, correspondendo a {(votos[idx]/num_votos)*100:.2f} do total de votos')

#19) Uma empresa de pesquisas precisa tabular os resultados da seguinte enquete feita a um grande quantidade de organizações:
"Qual o melhor Sistema Operacional para uso em servidores?"

As possíveis respostas são:
1- Windows Server
2- Unix
3- Linux
4- Netware
5- Mac OS
6- Outro
Você foi contratado para desenvolver um programa que leia o resultado da enquete e informe ao final o resultado da mesma. O programa deverá ler os valores até ser informado o valor 0, que encerra a entrada dos dados. Não deverão ser aceitos valores além dos válidos para o programa (0 a 6). Os valores referentes a cada uma das opções devem ser armazenados num vetor. Após os dados terem sido completamente informados, o programa deverá calcular a percentual de cada um dos concorrentes e informar o vencedor da enquete. O formato da saída foi dado pela empresa, e é o seguinte:

Sistema Operacional     Votos   %
-------------------     -----   ---
Windows Server           1500   17%
Unix                     3500   40%
Linux                    3000   34%
Netware                   500    5%
Mac OS                    150    2%
Outro                     150    2%
-------------------     -----
Total                    8800

O Sistema Operacional mais votado foi o Unix, com 3500 votos, correspondendo a 40% dos votos.

opcoes = ['Windows Server', 'Unix', 'Linux', 'Netware', 'Mac OS', 'Outro']
sistemas = [0] * 6
while True:
    while True:
        opcao = int(input('Digite a opção: '))
        if opcao > 6 or opcao < 0:
            print('Opção inválida.')
        else:
            break
    if opcao == 0:
        break
    sistemas[opcao - 1] = sistemas[opcao - 1] + 1


print('Sistema Operacional     Votos  %')
print('----------------------------------')
cont = 0
melhor = 0
melhorSis = ''
perc = 0
for s in sistemas:
    print('%s   %d   %.2f%%' % (opcoes[cont], s,(s * 100) / sum(sistemas) ))
    if s > melhor:
        melhor = s
        melhorSis = opcoes[cont]
        perc = (s * 100) / sum(sistemas)
    cont += 1

print('----------------------------------')
print('Total   %d' % sum(sistemas))
print('O Sistema Operacional mais votado foi o %s, com %d votos, correspondendo a %.2f dos votos.' % (melhorSis, melhor, perc))

#20) As Organizações Tabajara resolveram dar um abono aos seus colaboradores em reconhecimento ao bom resultado alcançado durante o ano que passou. Para isto contratou você para desenvolver a aplicação que servirá como uma projeção de quanto será gasto com o pagamento deste abono.
Após reuniões envolvendo a diretoria executiva, a diretoria financeira e os representantes do sindicato laboral, chegou-se a seguinte forma de cálculo:
a.Cada funcionário receberá o equivalente a 20% do seu salário bruto de dezembro; a.O piso do abono será de 100 reais, isto é, aqueles funcionários cujo salário for muito baixo, recebem este valor mínimo; Neste momento, não se deve ter nenhuma preocupação com colaboradores com tempo menor de casa, descontos, impostos ou outras particularidades. Seu programa deverá permitir a digitação do salário de um número indefinido (desconhecido) de salários. Um valor de salário igual a 0 (zero) encerra a digitação. Após a entrada de todos os dados o programa deverá calcular o valor do abono concedido a cada colaborador, de acordo com a regra definida acima. Ao final, o programa deverá apresentar:
O salário de cada funcionário, juntamente com o valor do abono;
O número total de funcionário processados;
O valor total a ser gasto com o pagamento do abono;
O número de funcionário que receberá o valor mínimo de 100 reais;
O maior valor pago como abono; A tela abaixo é um exemplo de execução do programa, apenas para fins ilustrativos. Os valores podem mudar a cada execução do programa.
Projeção de Gastos com Abono
============================

Salário: 1000
Salário: 300
Salário: 500
Salário: 100
Salário: 4500
Salário: 0

Salário    - Abono    
R$ 1000.00 - R$  200.00
R$  300.00 - R$  100.00
R$  500.00 - R$  100.00
R$  100.00 - R$  100.00
R$ 4500.00 - R$  900.00

Foram processados 5 colaboradores
Total gasto com abonos: R$ 1400.00
Valor mínimo pago a 3 colaboradores
Maior valor de abono pago: R$ 900.00

print('Digite 0 para encerrar o programa')
salarios = [] 
while True:
    salario = float(input('Salário: '))
    if salario == 0:
        break
    salarios.append(salario)

print('Projeção de Gastos com Abono')
print('============================')

print('Salário - Abono')
abonos, minimo = 0, 0
maior = 0
for s in salarios:
    abono = (salario * 20) / 100
    if abono < 100:
        abono = 100
        minimo += 1
    if abono > maior:
        maior = abono
    abonos += abono
    print('R$ %.2f - R$ %.2f' % (s, abono))

print('Foram processados %d colaboradores' % (sum(salarios)))
print('Total gasto com abonos: R$ %.2f' % abonos)
print('Valor mínimo pago a %d colaboradores' % minimo)
print('Maior valor de abono pago: R$ %.2f' % maior)

#21) Faça um programa que carregue uma lista com os modelos de cinco carros (exemplo de modelos: FUSCA, GOL, VECTRA etc). Carregue uma outra lista com o consumo desses carros, isto é, quantos quilômetros cada um desses carros faz com um litro de combustível. Calcule e mostre:
O modelo do carro mais econômico;
Quantos litros de combustível cada um dos carros cadastrados consome para percorrer uma distância de 1000 quilômetros e quanto isto custará, considerando um que a gasolina custe R$ 2,25 o litro. Abaixo segue uma tela de exemplo. O disposição das informações deve ser o mais próxima possível ao exemplo. Os dados são fictícios e podem mudar a cada execução do programa.
Comparativo de Consumo de Combustível

Veículo 1
Nome: fusca
Km por litro: 7
Veículo 2
Nome: gol
Km por litro: 10
Veículo 3
Nome: uno
Km por litro: 12.5
Veículo 4
Nome: Vectra
Km por litro: 9
Veículo 5
Nome: Peugeout
Km por litro: 14.5

Relatório Final
 1 - fusca           -    7.0 -  142.9 litros - R$ 321.43
 2 - gol             -   10.0 -  100.0 litros - R$ 225.00
 3 - uno             -   12.5 -   80.0 litros - R$ 180.00
 4 - vectra          -    9.0 -  111.1 litros - R$ 250.00
 5 - peugeout        -   14.5 -   69.0 litros - R$ 155.17
O menor consumo é do peugeout.

modelos = []
consumos = []

for i in range(1, 6):
    print('Veículo %d' % i)
    modelos.append(input('Nome: '))
    consumos.append(float(input('Km por litro: ')))

print('Relatório Final')
cont, custo = 0, 0
gasto = 0
menorModelo = ''
menor = 0
for m in modelos:
    custo = 1000 / consumos[cont]
    gasto = custo * 2.25
    print('%s      - %.1f  -  %.1f litros  - R$ %.2f' % (m, consumos[cont], consumo, gasto))
    if cont == 0:
        menor = custo
        menorModelo = m
    if menor < custo:
        menor = custo
        menorModelo = m
    cont += 1
print('O menor consumo é do %s.' % (menorModelo))

#22)Sua organização acaba de contratar um estagiário para trabalhar no Suporte de Informática, com a intenção de fazer um levantamento nas sucatas encontradas nesta área. A primeira tarefa dele é testar todos os cerca de 200 mouses que se encontram lá, testando e anotando o estado de cada um deles, para verificar o que se pode aproveitar deles.
Foi requisitado que você desenvolva um programa para registrar este levantamento. O programa deverá receber um número indeterminado de entradas, cada uma contendo: um número de identificação do mouse o tipo de defeito:
necessita da esfera;
necessita de limpeza; a.necessita troca do cabo ou conector; a.quebrado ou inutilizado Uma identificação igual a zero encerra o programa. Ao final o programa deverá emitir o seguinte relatório:
Quantidade de mouses: 100

Situação                        Quantidade              Percentual
1- necessita da esfera                  40                     40%
2- necessita de limpeza                 30                     30%
3- necessita troca do cabo ou conector  15                     15%
4- quebrado ou inutilizado              15                     15%

print('Defeitos:\n1 - Necessita de Esfera\n2 - Necessita de limpeza\n3 - Necessita troca de cabo ou conector\n4 - Quebrado ou inutilizado')
defeitos_ = ['Necessita de Esfera','Necessita de limpeza','Necessita troca de cabo ou conector','Quebrado ou inutilizado']


num_mouses = int(input('Quantos mouses defeituosos exeistem: '))
defeitos = 4*[0]

print('')
for idx in range(num_mouses):
    
    validacao = True
    while validacao:
        defeito = int(input('Qual o código do problema do mouse '+str(idx+1)+': '))
        if (defeito == 1) or (defeito == 2) or (defeito == 3) or (defeito == 4):
            validacao = False
        else:
            print('Número inválido, tente outro!')
    defeitos[defeito-1] = defeitos[defeito-1] + 1

for idx in range(len(defeitos_)):
    print(defeitos_[idx]+' - ' +str(defeitos[idx])+ 'defeitos - ' +str(defeitos[idx]*100/num_mouses)+'%' )

#23) A ACME Inc., uma empresa de 500 funcionários, está tendo problemas de espaço em disco no seu servidor de arquivos. Para tentar resolver este problema, o Administrador de Rede precisa saber qual o espaço ocupado pelos usuários, e identificar os usuários com maior espaço ocupado. Através de um programa, baixado da Internet, ele conseguiu gerar o seguinte arquivo, chamado "usuarios.txt":
alexandre       456123789
anderson        1245698456
antonio         123456456
carlos          91257581
cesar           987458
rosemary        789456125
Neste arquivo, o nome do usuário possui 15 caracteres. A partir deste arquivo, você deve criar um programa que gere um relatório, chamado "relatório.txt", no seguinte formato:

ACME Inc.               Uso do espaço em disco pelos usuários
------------------------------------------------------------------------
Nr.  Usuário        Espaço utilizado     % do uso

1    alexandre       434,99 MB             16,85%
2    anderson       1187,99 MB             46,02%
3    antonio         117,73 MB              4,56%
4    carlos           87,03 MB              3,37%
5    cesar             0,94 MB              0,04%
6    rosemary        752,88 MB             29,16%

ef toMB(tamanhoEmBytes):
   tamanhoEmBytes = float(tamanhoEmBytes)
   return (float(tamanhoEmBytes/(1024*1024)))
   
def percentualPorUsuario(lista, total):
   percentual = (lista[3]/total)*100
   #percentual = "{0:.2f}".format(percentual)
   lista.insert((len(cadaUsuario)),percentual)

def espacoMedioOcupado(lista, total):
   media = 0
   elementos = len(lista)
   media = (total)/(elementos+1)
   #media = "{0:.2f}".format(media)
   return media

#MAIN
usuarios = []
posicao = 1
total = media = 0
with open ("usuarios.txt","r") as arquivo:
   valor = 0
   for linha in arquivo:
      usuarios.append(linha.split()) 

   for cadaUsuario in usuarios:
      cadaUsuario.insert(0,posicao)
      valor = toMB(float(cadaUsuario[2]))
      total += valor
      cadaUsuario.insert((len(cadaUsuario)),valor)
      posicao+=1

   for cadaUsuario in usuarios:
      percentualPorUsuario(cadaUsuario, total)

media = espacoMedioOcupado(cadaUsuario,total)

with open ("relatorio.txt","w") as arquivo:
   arquivo.write("ACME Inc.               Uso do espaço em disco pelos usuários.\n")
   arquivo.write("--------------------------------------------------------------\n")
   arquivo.write("Nr.\tUsuário        \tEspaço utilizado\t% do uso\n\n")

   for cadaUsuario in usuarios:
      percentagem="{0:.2f}".format(round(cadaUsuario[3],2))
      arquivo.write(str(cadaUsuario[0])+'\t'+"{:<15}".format(cadaUsuario[1])+'\t'+"{:<16}".format(percentagem)+'MB'+'\t'+"{0:.2f}".format(cadaUsuario[4])+'%'+'\n')

   arquivo.write('\n\nEspaço Total Ocupado: ' + "{0:.2f}".format(total) + ' MB')
   arquivo.write('\n\nEspaço médio Ocupado: ' + "{0:.2f}".format(media) + ' MB')
   arquivo.close()

with open ("relatorio.txt","r") as arquivo:
   print(arquivo.read())

#24)Faça um programa que simule um lançamento de dados. Lance o dado 100 vezes e armazene os resultados em um vetor . Depois, mostre quantas vezes cada valor foi conseguido. Dica: use um vetor de contadores(1-6) e uma função para gerar numeros aleatórios, simulando os lançamentos dos dados.
from gerador_numeros import *

def conta_n_vezes(*lanc_dados):
    lancamentos = []
    lancamentos = lanc_dados

    for i in range(0,99):
        resultado = re.match('1', lancamentos[i])
        posicao = lancamentos[i]
        if resultado is not None:
            print("Nos lançamentos o numero 1 apareceu na(s) seguinte(s) posição(ões): %s" % posicao)
lanc_dados = []
lanc_dados = gera_lancamentos()

conta_n_vezes(*lanc_dados)



